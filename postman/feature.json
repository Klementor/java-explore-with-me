{
	"info": {
		"_postman_id": "6846782d-135d-4da1-b907-8eec29ac286e",
		"name": "comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23144581"
	},
	"item": [
		{
			"name": "validation",
			"item": [
				{
					"name": "private",
					"item": [
						{
							"name": "Пустой комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"     pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"Has error response\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий из пустоты (tab, space, ...)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"     pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"Has error response\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"    \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Без комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"     pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"Has error response\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Меньше 3 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"     pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"Has error response\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"=)\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Больше 250 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"     pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"Has error response\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"This text contains more than 250 characters. Love is not finding someone to live with: it’s finding someone you can’t live without. In your old age, you will not regret that you did not watch the series or drunk too little beer, you will regret that you missed your whole life.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"pm.test(\"Comment list test\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length, 'List of comments should be empty').to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id/comments?from=0&size=1000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1000"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Комментарий от 1 к 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"pm.test(\"There is a comment body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"The comment has `id` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"The comment has `text` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"text\" must be \"Enjoy every moment.\"').to.eql('Enjoy every moment.');",
							"});",
							"pm.test(\"The comment has `authorId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('authorId');",
							"    pm.expect(jsonData.authorId, '\"authorId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"The comment has `eventId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Enjoy every moment.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Коментарий к 1 от 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"There is a comment body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"The comment has `id` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"The comment has `text` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"text\" must be \"Enjoy every moment.\"').to.eql('Enjoy every moment.');",
							"});",
							"pm.test(\"The comment has `authorId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('authorId');",
							"    pm.expect(jsonData.authorId, '\"authorId\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"The comment has `eventId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/:id/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						},
						{
							"key": "comId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий от 2 к 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"pm.test(\"There is a comment body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"The comment has `id` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"The comment has `text` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"text\" must be \"Now or never!\"').to.eql('Now or never!');",
							"});",
							"pm.test(\"The comment has `authorId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('authorId');",
							"    pm.expect(jsonData.authorId, '\"authorId\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"The comment has `eventId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Now or never!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий к 1 от 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"There is a comment body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"The comment has `id` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"The comment has `text` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"text\" must be \"Now or never!\"').to.eql('Now or never!');",
							"});",
							"pm.test(\"The comment has `authorId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('authorId');",
							"    pm.expect(jsonData.authorId, '\"authorId\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"The comment has `eventId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/:id/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						},
						{
							"key": "comId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий к 1 от 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"There is a comment body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"The comment has `id` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"The comment has `text` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, '\"text\" must be \"Elementary, my dear Watson!\"').to.eql('Elementary, my dear Watson!');",
							"});",
							"pm.test(\"The comment has `authorId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('authorId');",
							"    pm.expect(jsonData.authorId, '\"authorId\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"The comment has `eventId` field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId');",
							"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Elementary, my dear Watson!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "comId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарии к 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Comment list test\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'The length of the list of comments should be equal to 2').to.eql(2);",
							"});",
							"pm.test(\"Comments should be sorted by IDs in ascending order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/:id/comments?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментий от 1 к 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "comId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарии к 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Comment list test\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'The length of the list of comments should be equal to 1').to.eql(1);",
							"});",
							"pm.test(\"Comments should be sorted by IDs in ascending order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/:id/comments?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}